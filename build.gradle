plugins {
    id 'java'
    id 'application'
    id 'com.gradleup.shadow' version '9.0.2'
    id 'de.undercouch.download' version '5.6.0'
    id 'org.graalvm.buildtools.native' version '0.10.4'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories { mavenCentral() }

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test { useJUnitPlatform() }

/** App settings */
ext {
    appName       = 'Catalan'
    mainClassName = 'org.engine.Main'
}

application {
    mainClass = mainClassName
    applicationDefaultJvmArgs = ['--add-modules', 'jdk.incubator.vector']
}

java { toolchain { languageVersion = JavaLanguageVersion.of(24) } }

// Enable incubator Vector API for compilation and tests
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
}

tasks.withType(Test).configureEach {
    jvmArgs '--add-modules', 'jdk.incubator.vector'
}

/** Fat JAR */
tasks.named('shadowJar') {
    archiveBaseName.set(appName)
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { attributes 'Main-Class': mainClassName }
}

def buildDirPath  = layout.buildDirectory

/** GraalVM download settings (JDK 24.0.2 for Windows x64) */
ext {
    graalVersion   = '24.0.2'
    graalZipUrl    = "https://download.oracle.com/graalvm/24/archive/graalvm-jdk-${graalVersion}_windows-x64_bin.zip"
}

def graalDir      = layout.buildDirectory.dir("graalvm")
def graalZipFile  = graalDir.map { it.file("graalvm.zip") }

tasks.register('downloadGraal', de.undercouch.gradle.tasks.download.Download) {
    src graalZipUrl; dest graalZipFile.get().asFile; overwrite false
}

tasks.register('unzipGraal', Copy) {
    dependsOn 'downloadGraal'
    from { zipTree(graalZipFile.get().asFile) }
    into graalDir
}

// Ensure GraalVM plugin uses full settings
graalvmNative {
    toolchainDetection = true
    binaries {
        def pgoProfilePath = project.findProperty('pgoProfile') ?: layout.projectDirectory.file('default.iprof').asFile.absolutePath
        all {
            imageName = appName
            jvmArgs.addAll('--add-modules=jdk.incubator.vector')
            buildArgs.addAll(
                '--no-fallback',
                '--enable-url-protocols=http,https',
                '-H:+UnlockExperimentalVMOptions',
                '-H:+VectorAPISupport',
                '-J--add-modules=jdk.incubator.vector',
                '--march=x86-64-v3',
                '-O3',
                '--gc=G1',
                '--initialize-at-build-time=org.engine',
                '-H:NativeLinkerOption=/OPT:REF',
                '-H:NativeLinkerOption=/OPT:ICF'
            )
            resources.autodetect()
        }
        main { }
        pgoInstrumented {
            imageName = "${appName}-instr"
            buildArgs.add('-H:PGOInstrument')
        }
        pgoOptimized {
            imageName = "${appName}-pgo"
            buildArgs.add("-H:PGOProfiles=${pgoProfilePath}")
        }
    }
}

// If GraalVM was downloaded locally, point the GraalVM plugin launcher to it
providers.provider {
    def root = graalDir.get().asFile.listFiles()?.find { it.isDirectory() && it.name.toLowerCase().startsWith('graalvm-jdk-') }
    if (root != null) {
        graalvmNative {
            binaries {
                main {
                    javaLauncher.set(javaToolchains.launcherFor {
                        languageVersion = JavaLanguageVersion.of(24)
                    })
                    // Let Native Build Tools find native-image inside the selected launcher
                }
            }
        }
    }
}

/** Convenience native meta-task */
tasks.register('packageNative') {
    group = 'distribution'
    description = 'Build the GraalVM native Windows EXE.'
    dependsOn tasks.named('nativeCompile')
}

/** Configure Gradle to see the downloaded GraalVM for this build */
tasks.register('prepareGraalToolchain') {
    dependsOn 'unzipGraal'
    doLast {
        def root = graalDir.get().asFile.listFiles().find { it.isDirectory() && it.name.toLowerCase().startsWith('graalvm-jdk-') }
        if (root) {
            println "Using GraalVM at: ${root.absolutePath}"
            System.setProperty('org.gradle.java.installations.paths', root.absolutePath)
        } else {
            println 'No downloaded GraalVM found; relying on auto-detection.'
        }
    }
}

// Make nativeCompile depend on prepared toolchain so devs can just run it
tasks.named('nativeCompile') { dependsOn 'prepareGraalToolchain' }

/** Convenience native tasks */
tasks.register('nativeFastNoGC') {
    group = 'distribution'
    description = 'Build native exe with Epsilon GC (no GC) for max throughput.'
    dependsOn tasks.named('nativeCompile')
    doFirst {
        graalvmNative.binaries.main.get().buildArgs.add('--gc=epsilon')
    }
}

tasks.register('nativeInstrument') {
    group = 'distribution'
    description = 'Build PGO-instrumented native exe (run it to produce default.iprof).'
    dependsOn tasks.named('pgoInstrumentedCompile')
}

tasks.register('nativePGO') {
    group = 'distribution'
    description = 'Build PGO-optimized native exe using default.iprof (or -PpgoProfile=...).'
    dependsOn tasks.named('pgoOptimizedCompile')
}
